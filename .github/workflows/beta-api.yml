name: BETA-API-CI

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the beta branch
  pull_request:
    branches: 
      - beta
    types: [closed]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
#2
env:
  REGISTRY: "registry.digitalocean.com/tinypage"
  IMAGE_NAME: "api"

#3
jobs:
  build_and_push:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    environment: beta
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          ref: beta
      
      - name: Paths Changes Filter
        uses: dorny/paths-filter@v2.10.2
        id: changes
        with:
          filters: |
            api: 'api/**'
            editor: 'editor/**'
            renderer: 'renderer/**'

      - name: Docker Layer Caching
        uses: satackey/action-docker-layer-caching@v0.0.11

      - name: Build container image
        if: steps.changes.outputs.api == 'true'
        run: docker build -f $(echo $IMAGE_NAME)/$(echo $IMAGE_NAME).Dockerfile -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Remove all old images
        run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Stop running container
            docker stop $(echo $IMAGE_NAME)
            # Remove old container
            docker rm $(echo $IMAGE_NAME)
            # Run a new container from a new image
            docker run -d \
            --restart always \
            -e DATABASE=($DATABASE) \
            -e API_URL=($API_URL) \
            -e EDITOR_URL=($EDITOR_URL) \
            -e RENDERER_URL=($RENDERER_URL) \
            -e SECRET=($SECRET) \
            -e HOST=($HOST) \
            -e API_PORT=($API_PORT) \
            -e CONTACT_EMAIL=($CONTACT_EMAIL) \
            -e AWS_SENDER_EMAIL_ADDRESS=($AWS_SENDER_EMAIL_ADDRESS) \
            -e AWS_REGION=($AWS_REGION) \
            -e AWS_ACCESS_KEY=($AWS_ACCESS_KEY) \
            -e AWS_SECRET_KEY=($AWS_SECRET_KEY) \
            -e S3_ENDPOINT=($S3_ENDPOINT) \
            -e S3_BUCKETNAME=($S3_BUCKETNAME) \
            -e S3_PORT=($S3_PORT) \
            -e S3_USE_SSL=($S3_USE_SSL) \
            -e S3_ACCESS_KEY=($S3_ACCESS_KEY) \
            -e S3_SECRET_KEY=($S3_SECRET_KEY) \
            -e ALLOW_X_FORWARD_HEADER=($ALLOW_X_FORWARD_HEADER) \
            -e VALIDATE_EMAILS=($VALIDATE_EMAILS) \
            -e GOOGLE_CLIENT_ID=($GOOGLE_CLIENT_ID) \
            -e GOOGLE_CLIENT_SECRET=($GOOGLE_CLIENT_SECRET) \
            -e GOOGLE_REDIRECT_URL=($GOOGLE_REDIRECT_URL) \
            -e PAYMENTS_STRIPE_SECRET=($PAYMENTS_STRIPE_SECRET) \
            -e PAYMENTS_STRIPE_WEBHOOK_SECRET=($PAYMENTS_STRIPE_WEBHOOK_SECRET) \
            -p $($API_PORT):$($API_PORT) \
            --name $(echo $IMAGE_NAME) \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
