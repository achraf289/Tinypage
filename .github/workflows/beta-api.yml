name: $ENV-CI

# 1
on:
  push:
    branches:
      - $ENV

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
#2
env:
  REGISTRY: "registry.digitalocean.com/tinypage"
  ENV: "beta"
#3
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    environment: $ENV
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          ref: $ENV

      - name: Paths Changes Filter
        uses: dorny/paths-filter@v2.10.2
        id: changes
        with:
          ref: $ENV
          base: $ENV
          filters: |
            api: 
              - 'api/**'
              - 'editor/@types/editor-types.d.ts'
            editor: 'editor/**'
            renderer: 'renderer/**'
      - name: Docker Layer Caching
        uses: satackey/action-docker-layer-caching@v0.0.11
        with:
          key: tinypage-v2-cache-{hash}
          restore-keys: |
            tinypage-v2-cache-

      - name: Build container image
        if: steps.changes.outputs.api == 'true'
        run: docker build -f api/api.Dockerfile -t $REGISTRY/api:$ENV .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: docker push $REGISTRY/api:$ENV

  deploy:
    runs-on: ubuntu-latest
    environment: $ENV
    needs: build_and_push

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          ref: $ENV
      - name: Create api env file
          run: |
            echo 'DATABASE=${{ secrets.DATABASE }}
            API_URL=${{ secrets.API_URL }}
            EDITOR_URL=${{ secrets.EDITOR_URL }}
            RENDERER_URL=${{ secrets.RENDERER_URL }}
            SECRET=${{ secrets.SECRET }}
            HOST=${{ secrets.HOST }}
            API_PORT=${{ secrets.API_PORT }}
            CONTACT_EMAIL=${{ secrets.CONTACT_EMAIL }}
            AWS_SENDER_EMAIL_ADDRESS=${{ secrets.AWS_SENDER_EMAIL_ADDRESS }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}
            S3_BUCKETNAME=${{ secrets.S3_BUCKETNAME }}
            S3_PORT=${{ secrets.S3_PORT }}
            S3_USE_SSL=${{ secrets.S3_USE_SSL }}
            S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}
            S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}
            ALLOW_X_FORWARD_HEADER=${{ secrets.ALLOW_X_FORWARD_HEADER }}
            VALIDATE_EMAILS=${{ secrets.VALIDATE_EMAILS }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOOGLE_REDIRECT_URL=${{ secrets.GOOGLE_REDIRECT_URL }}
            PAYMENTS_STRIPE_SECRET=${{ secrets.PAYMENTS_STRIPE_SECRET }}
            PAYMENTS_STRIPE_WEBHOOK_SECRET=${{ secrets.PAYMENTS_STRIPE_WEBHOOK_SECRET }}' > api.env
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          envs: REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Stop running container
            docker-compose -f docker-compose-$ENV.yaml down api
            # Remove old container
            docker rm api
            # Run a new container from a new image
            docker-compose -f docker-compose-$ENV.yaml up -d api 
            docker run -d \
            --name api \
            --restart always \
            -p ${{ secrets.API_PORT }}:${{ secrets.API_PORT }} \
            $REGISTRY/api:$ENV
