name: BETA-CI

# 1
on:
  push:
    branches:
      - beta

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
#2
env:
  REGISTRY: "registry.digitalocean.com/tinypage"
  IMAGE_NAME: "api"

#3
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    environment: beta
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          ref: beta

      - name: Paths Changes Filter
        uses: dorny/paths-filter@v2.10.2
        id: changes
        with:
          ref: beta
          base: beta
          filters: |
            api: 'api/**'
            editor: 'editor/**'
            renderer: 'renderer/**'
      - name: Docker Layer Caching
        uses: satackey/action-docker-layer-caching@v0.0.11

      - name: Build container image
        if: steps.changes.outputs.api == 'true'
        run: docker build -f $(echo $IMAGE_NAME)/$(echo $IMAGE_NAME).Dockerfile -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):latest .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):latest

  deploy:
    runs-on: ubuntu-latest
    environment: beta
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Stop running container
            docker stop $(echo $IMAGE_NAME)
            # Remove old container
            docker rm $(echo $IMAGE_NAME)
            # Run a new container from a new image
            docker run -d \
            --restart always \
            -e DATABASE=${{ secrets.DATABASE }} \
            -e API_URL=${{ secrets.API_URL }} \
            -e EDITOR_URL=${{ secrets.EDITOR_URL }} \
            -e RENDERER_URL=${{ secrets.RENDERER_URL }} \
            -e SECRET=${{ secrets.SECRET }} \
            -e HOST=${{ secrets.HOST }} \
            -e API_PORT=${{ secrets.API_PORT }} \
            -e CONTACT_EMAIL=${{ secrets.CONTACT_EMAIL }} \
            -e AWS_SENDER_EMAIL_ADDRESS=${{ secrets.AWS_SENDER_EMAIL_ADDRESS }}\
            -e AWS_REGION=${{ secrets.AWS_REGION }}\
            -e AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}\
            -e AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}\
            -e S3_ENDPOINT=${{ secrets.S3_ENDPOINT }} \
            -e S3_BUCKETNAME=${{ secrets.S3_BUCKETNAME }}\
            -e S3_PORT=${{ secrets.S3_PORT }}\
            -e S3_USE_SSL=${{ secrets.S3_USE_SSL }}\
            -e S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}\
            -e S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}\
            -e ALLOW_X_FORWARD_HEADER=${{ secrets.ALLOW_X_FORWARD_HEADER }}\
            -e VALIDATE_EMAILS=${{ secrets.VALIDATE_EMAILS }}\
            -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}\
            -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}\
            -e GOOGLE_REDIRECT_URL=${{ secrets.GOOGLE_REDIRECT_URL }}\
            -e PAYMENTS_STRIPE_SECRET=${{ secrets.PAYMENTS_STRIPE_SECRET }}\
            -e PAYMENTS_STRIPE_WEBHOOK_SECRET=${{ secrets.PAYMENTS_STRIPE_WEBHOOK_SECRET }}\
            -p ${{ secrets.API_PORT }}:${{ secrets.API_PORT }}\
            --name $(echo $IMAGE_NAME) \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):latest || true
            #Debug
            echo $REGISTRY/$IMAGE_NAME:latest
